#!/usr/bin/env python
# coding: utf-8

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

# Load the data using pandas
data = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv')

# Initialize the Dash app
app = dash.Dash(__name__)

# List of years 
year_list = [i for i in range(1980, 2024)]

# Create the layout of the app
app.layout = html.Div([
    # TASK 2.1: Add title to the dashboard
    html.H1(
        "Automobile Sales Statistics Dashboard",
        style={'textAlign': 'center', 'color': '#503D36', 'font-size': '24px'}
    ),
    
    # TASK 2.2: Add two dropdown menus
    html.Div([
        html.Label("Select Statistics:"),
        dcc.Dropdown(
            id='dropdown-statistics',
            options=[
                {'label': 'Yearly Statistics', 'value': 'Yearly Statistics'},
                {'label': 'Recession Period Statistics', 'value': 'Recession Period Statistics'},
                {'label': 'Yearly Report Statistics', 'value': 'Yearly Report Statistics'}
            ],
            value=None,
            placeholder='Select a report type'
        )
    ]),
    
    html.Div([
        html.Label("Select Year:"),
        dcc.Dropdown(
            id='select-year',
            options=[{'label': i, 'value': i} for i in year_list],
            value=None,
            placeholder='Select year',
            disabled=True  # Initially disabled until stats selected
        )
    ]),
    
    # TASK 2.3: Add a division for output display
    html.Div(id='output-container', className='chart-grid', style={'display': 'flex', 'flexDirection': 'column'}),
])


# TASK 2.4: Enable/disable year dropdown based on selected statistics
@app.callback(
    Output('select-year', 'disabled'),
    Input('dropdown-statistics', 'value')
)
def update_input_container(selected_statistics):
    if selected_statistics == 'Yearly Statistics' or selected_statistics == 'Yearly Report Statistics':
        return False
    else:
        return True


# Callback for plotting graphs based on selected statistics and year
@app.callback(
    Output('output-container', 'children'),
    [Input('dropdown-statistics', 'value'),
     Input('select-year', 'value')]
)
def update_output_container(statistic_selected, year_selected):
    if not statistic_selected:
        return None
    
    if statistic_selected == 'Recession Period Statistics':
        # Filter the data for recession periods
        recession_data = data[data['Recession'] == 1]

        # Plot 1: Automobile sales fluctuation over Recession Period (year wise)
        yearly_rec = recession_data.groupby('Year')['Automobile_Sales'].mean().reset_index()
        R_chart1 = dcc.Graph(
            figure=px.line(yearly_rec, 
                           x='Year',
                           y='Automobile_Sales',
                           title="Average Automobile Sales fluctuation over Recession Period"))

        # Plot 2: Average number of vehicles sold by vehicle type during recession
        average_sales = recession_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()
        R_chart2 = dcc.Graph(
            figure=px.bar(average_sales,
                          x='Vehicle_Type',
                          y='Automobile_Sales',
                          title="Average Vehicles Sold by Vehicle Type during Recession"))

        # Plot 3: Pie chart for total expenditure share by vehicle type during recession
        exp_rec = recession_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()
        R_chart3 = dcc.Graph(
            figure=px.pie(exp_rec,
                          values='Advertising_Expenditure',
                          names='Vehicle_Type',
                          title="Expenditure Share by Vehicle Type during Recession"))

        # Plot 4: Bar chart for effect of unemployment rate on vehicle type and sales
        unemp_data = recession_data.groupby(['unemployment_rate', 'Vehicle_Type'])['Automobile_Sales'].mean().reset_index()
        R_chart4 = dcc.Graph(
            figure=px.bar(unemp_data,
                          x='unemployment_rate',
                          y='Automobile_Sales',
                          color='Vehicle_Type',
                          labels={'unemployment_rate': 'Unemployment Rate', 'Automobile_Sales': 'Average Automobile Sales'},
                          title='Effect of Unemployment Rate on Vehicle Type and Sales'))

        return [
            html.Div(className='chart-item', children=[R_chart1, R_chart2], style={'display': 'flex'}),
            html.Div(className='chart-item', children=[R_chart3, R_chart4], style={'display': 'flex'})
        ]

    elif statistic_selected == 'Yearly Statistics':
        if not year_selected:
            return html.Div("Please select a year.", style={'color': 'red', 'font-weight': 'bold'})

        # Filter data for selected year
        year_data = data[data['Year'] == int(year_selected)]

        # Plot 1: Total automobile sales by quarter
        qtr_sales = year_data.groupby('Quarter')['Automobile_Sales'].sum().reset_index()
        Y_chart1 = dcc.Graph(
            figure=px.bar(qtr_sales,
                          x='Quarter',
                          y='Automobile_Sales',
                          title=f'Total Automobile Sales per Quarter in {year_selected}'))

        # Plot 2: Average automobile sales by vehicle type
        avg_sales_type = year_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()
        Y_chart2 = dcc.Graph(
            figure=px.bar(avg_sales_type,
                          x='Vehicle_Type',
                          y='Automobile_Sales',
                          title=f'Average Vehicle Sales by Type in {year_selected}'))

        # Plot 3: Pie chart of advertising expenditure by vehicle type
        ad_exp = year_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()
        Y_chart3 = dcc.Graph(
            figure=px.pie(ad_exp,
                          values='Advertising_Expenditure',
                          names='Vehicle_Type',
                          title=f'Advertising Expenditure Share by Vehicle Type in {year_selected}'))

        # Plot 4: Effect of unemployment rate on sales by vehicle type
        unemp_yr = year_data.groupby(['unemployment_rate', 'Vehicle_Type'])['Automobile_Sales'].mean().reset_index()
        Y_chart4 = dcc.Graph(
            figure=px.bar(unemp_yr,
                          x='unemployment_rate',
                          y='Automobile_Sales',
                          color='Vehicle_Type',
                          title=f'Unemployment Rate vs Sales by Vehicle Type in {year_selected}'))

        return [
            html.Div(className='chart-item', children=[Y_chart1, Y_chart2], style={'display': 'flex'}),
            html.Div(className='chart-item', children=[Y_chart3, Y_chart4], style={'display': 'flex'})
        ]

    elif statistic_selected == 'Yearly Report Statistics':
        if not year_selected:
            return html.Div("Please select a year.", style={'color': 'red', 'font-weight': 'bold'})

        yearly_data = data[data['Year'] == int(year_selected)]

        # Plot 1: Yearly Average Automobile Sales over the whole period (line chart)
        yas = data.groupby('Year')['Automobile_Sales'].mean().reset_index()
        Y_chart1 = dcc.Graph(
            figure=px.line(yas,
                           x='Year',
                           y='Automobile_Sales',
                           title='Yearly Average Automobile Sales Over the Period'))

        # Plot 2: Total Monthly Automobile Sales (line chart)
        mas = data.groupby('Month')['Automobile_Sales'].sum().reset_index()
        Y_chart2 = dcc.Graph(
            figure=px.line(mas,
                           x='Month',
                           y='Automobile_Sales',
                           title='Total Monthly Automobile Sales'))

        # Plot 3: Average Vehicles Sold by Vehicle Type for the selected year (bar chart)
        avr_vdata = yearly_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()
        Y_chart3 = dcc.Graph(
            figure=px.bar(avr_vdata,
                          x='Vehicle_Type',
                          y='Automobile_Sales',
                          title=f'Average Vehicles Sold by Vehicle Type in the year {year_selected}'))

        # Plot 4: Total Advertisement Expenditure for each vehicle (pie chart)
        exp_data = yearly_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()
        Y_chart4 = dcc.Graph(
            figure=px.pie(exp_data,
                          values='Advertising_Expenditure',
                          names='Vehicle_Type',
                          title='Total Advertisement Expenditure for Each Vehicle'))

        return [
            html.Div(className='chart-item', children=[Y_chart1, Y_chart2], style={'display': 'flex'}),
            html.Div(className='chart-item', children=[Y_chart3, Y_chart4], style={'display': 'flex'})
        ]

    else:
        return None


if __name__ == '__main__':
    app.run(debug=True)
